const AcademicPlan = require("../models/StudentAcademicPlan");
const Student = require("../models/Student");
const mongoose = require("mongoose");

// Helper (already in your file)
const calculateTotalSemesters = (years) =>
  years.reduce((tot, y) => tot + y.semesters.length, 0);

// controllers/studentAcademicPlanController.js

exports.createPlan = async (req, res) => {
  try {
    // 1) Pull studentId from route param
    const studentId = req.params.studentId;
    if (!mongoose.Types.ObjectId.isValid(studentId)) {
      return res.status(400).json({
        success: false,
        message: "Invalid student ID format",
      });
    }

    // 2) Verify that student exists
    if (req.user.role !== "student") {
      return res.status(403).json({
        success: false,
        message: "Only students can create academic plans",
      });
    }

    // 3) Enforce max-3-plans rule
    const planCount = await AcademicPlan.countDocuments({ student: studentId });
    if (planCount >= 3) {
      return res.status(400).json({
        success: false,
        message: "You may only have up to 3 academic plans",
      });
    }

    const { name, years, notes } = req.body;

    // 4) Validate input
    if (!name || !name.trim()) {
      return res.status(400).json({
        success: false,
        message: "Plan name is required",
      });
    }

    // 5) Compute total semesters
    const semesters = calculateTotalSemesters(years);

    // 6) Create & save
    const newPlan = new AcademicPlan({
      student: studentId,
      name: name.trim(),
      years,
      semesters,
      notes: notes || "",
      // identifier auto-generated by schema
      isDefault: planCount === 0,
    });

    const savedPlan = await newPlan.save();

    return res.status(201).json({
      success: true,
      data: savedPlan,
      message: "Academic plan created successfully",
    });
  } catch (error) {
    console.error("Error creating academic plan:", error);
    return res.status(500).json({
      success: false,
      message: "Internal server error while creating plan",
    });
  }
};

// Get all plans for a user
exports.getUserPlans = async (req, res) => {
  try {
    const studentId = req.params.studentId;

    // Validate the studentId format
    if (!mongoose.Types.ObjectId.isValid(studentId)) {
      return res.status(400).json({
        success: false,
        message: "Invalid student ID format",
      });
    }

    // Fetch all plans (could be zero)
    const plans = await AcademicPlan.find({ student: studentId })
      .sort({ isDefault: -1, createdAt: -1 })
      .lean();

    // Always return 200, even if plans.length === 0
    return res.status(200).json({
      success: true,
      data: plans,
      count: plans.length,
    });
  } catch (error) {
    console.error("Error fetching user plans:", error);
    return res.status(500).json({
      success: false,
      message: "Internal server error while fetching plans",
    });
  }
};

// Get a single plan by ID
exports.getPlanById = async (req, res) => {
  try {
    const planId = req.params.planId;
    const studentId = req.user.user_id || req.user._id;
    const plan = await AcademicPlan.findOne({
      identifier: planId,
      student: studentId,
    }).lean();

    if (!plan) {
      return res.status(404).json({
        success: false,
        message: "Academic plan not found",
      });
    }

    return res.status(200).json({
      success: true,
      data: plan,
    });
  } catch (error) {
    console.error("Error fetching plan:", error);
    return res.status(500).json({
      success: false,
      message: "Internal server error while fetching plan",
    });
  }
};

// Update an existing plan
exports.updatePlan = async (req, res) => {
  try {
    const { name, years, notes } = req.body;
    const planId = req.params.planId;
    const studentId = req.user.user_id || req.user._id;

    // Validate input
    if (!name || !name.trim()) {
      return res.status(400).json({
        success: false,
        message: "Plan name is required",
      });
    }

    const semesters = calculateTotalSemesters(years);

    const updatedPlan = await AcademicPlan.findOneAndUpdate(
      { identifier: planId, student: studentId },
      {
        name: name.trim(),
        years,
        semesters,
        notes: notes || "",
        updatedAt: new Date(),
      },
      { new: true, runValidators: true }
    );

    if (!updatedPlan) {
      return res.status(404).json({
        success: false,
        message: "Academic plan not found",
      });
    }

    return res.status(200).json({
      success: true,
      data: updatedPlan,
      message: "Academic plan updated successfully",
    });
  } catch (error) {
    console.error("Error updating plan:", error);

    if (error.name === "ValidationError") {
      return res.status(400).json({
        success: false,
        message: "Validation error",
        errors: Object.values(error.errors).map((val) => val.message),
      });
    }

    return res.status(500).json({
      success: false,
      message: "Internal server error while updating plan",
    });
  }
};

// Delete a plan
exports.deletePlan = async (req, res) => {
  try {
    const planId = req.params.planId;
    const studentId = req.user.user_id || req.user._id;

    const plan = await AcademicPlan.findOneAndDelete({
      identifier: planId,
      student: studentId,
    });

    if (!plan) {
      return res.status(404).json({
        success: false,
        message: "Academic plan not found",
      });
    }

    // If deleted plan was default, set another plan as default
    if (plan.isDefault) {
      const anotherPlan = await AcademicPlan.findOne({ student: studentId })
        .sort({ createdAt: -1 })
        .limit(1);

      if (anotherPlan) {
        anotherPlan.isDefault = true;
        await anotherPlan.save();
      }
    }

    return res.status(200).json({
      success: true,
      message: "Academic plan deleted successfully",
    });
  } catch (error) {
    console.error("Error deleting plan:", error);
    return res.status(500).json({
      success: false,
      message: "Internal server error while deleting plan",
    });
  }
};

// Set default plan
exports.setDefaultPlan = async (req, res) => {
  try {
    const planId = req.params.planId;
    const studentId = req.user.user_id || req.user._id;

    // Verify plan exists and belongs to student
    const plan = await AcademicPlan.findOne({
      identifier: planId,
      student: studentId,
    });

    if (!plan) {
      return res.status(404).json({
        success: false,
        message: "Academic plan not found",
      });
    }

    // Start transaction to ensure atomic update
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
      // Unset all other default plans
      await AcademicPlan.updateMany(
        { student: studentId, _id: { $ne: planId } },
        { $set: { isDefault: false } },
        { session }
      );

      // Set selected plan as default
      plan.isDefault = true;
      await plan.save({ session });

      await session.commitTransaction();

      return res.status(200).json({
        success: true,
        data: plan,
        message: "Default plan updated successfully",
      });
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  } catch (error) {
    console.error("Error setting default plan:", error);
    return res.status(500).json({
      success: false,
      message: "Internal server error while setting default plan",
    });
  }
};
